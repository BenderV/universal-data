from genson import SchemaBuilder

import singer


def add_null_type(schema):
    for key, value in schema["properties"].items():
        if key not in schema["required"]:
            value["type"] = (
                ["null"] + value["type"]
                if isinstance(value["type"], list)
                else [value["type"], "null"]
            )

        if "type" in value:
            if value["type"] == "object":
                value = add_null_type(value)
            if value["type"] == "array":
                value["items"] = add_null_type(value["items"])
        if "anyOf" in value:
            # print(value)
            # value = value["anyOf"][1]
            del value["anyOf"]
            # value["type"] = ["null", "string"]
            # value["anyOf"] = [
            #     add_null_type(r)
            #     for r in value["anyOf"]
            #     if r.get("type") != "null"  # array or object ?
            # ]
    return schema


def adapt_data_to_schema(schema, data):
    for key, value in schema["properties"].items():
        if key not in schema["required"]:
            value["type"] = (
                ["null"] + value["type"]
                if isinstance(value["type"], list)
                else [value["type"], "null"]
            )

        if "type" in value:
            if value["type"] == "object":
                value = add_null_type(value)
            if value["type"] == "array":
                value["items"] = add_null_type(value["items"])

        # one level: ok
        # two level: so-so
        # three level: death
        if "anyOf" in value:
            # print(value)
            # value = value["anyOf"][1]
            del value["anyOf"]
            # value["type"] = ["null", "string"]

    return schema


def transfert(name, items, primary_key):
    builder = SchemaBuilder()
    for item in items:
        builder.add_object(item)

    autogenerated_schema = builder.to_schema()
    autogenerated_schema_fixed = add_null_type(autogenerated_schema)

    # Transform dict of jsonb to dict of string
    for key, value in autogenerated_schema_fixed["properties"].items():
        if value["type"] == "jsonb":
            value["type"] = "string"
            value["format"] = "jsonb"

    properties = autogenerated_schema_fixed["properties"]
    singer.write_schema(name, {"properties": properties}, primary_key)
    singer.write_records(name, items)
